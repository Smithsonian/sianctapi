<?php

/**
 * Theme function
 * @see edan_custom_search_theme().
 */
function edan_custom_search_facets($args) {

  $content = '';
  $facets_raw = isset($args['facets_raw']) ? $args['facets_raw'] : array();
  $slug = isset($args['slug']) ? $args['slug'] : '';

  $querystring_args = drupal_get_query_parameters();
  // Git 10b79b1e30
  //$collections_extra = isset($querystring_args['collections']) ? '&collections' : '';

  // if we're hiding the default facets to prevent removal, do that:
  $defaults = _edan_custom_search_variable_get($slug);
  $hide_default_facets = (isset($defaults['hide_default_facets']) && $defaults['hide_default_facets'] == 1) ? TRUE : FALSE;
  $default_facets = (isset($defaults['search_params'])) ? $defaults['search_params'] : '';

  // split the text blob of default facets, on linebreaks
  $default_facets_array = explode("\r\n", $default_facets);

  // $facets_raw is the array generated by edan_custom_search_facets_raw()
  if (!empty($facets_raw) && is_array($facets_raw)) {
    $content .= '<div class="edan-search-facet-list"><ul class="root-facet-list">';
    foreach ($facets_raw as $field => $vals) {
      if(is_array($facets_raw[$field]) && isset($facets_raw[$field]['facet_label'])) {
        $_name = (strlen($facets_raw[$field]['facet_label']) > 0) ? $facets_raw[$field]['facet_label'] : $field;
        // fields with periods in them cause issues with the js; replace with underscores
        $field_clean = str_replace('.', '_', $field);
        $content .= "\n" . '<li><a href="#' . $field_clean . '" class="category">' . $_name . '</a> <ul id="facet-' . $field_clean . '" class="facets">';

        if(is_array($vals)) {
          foreach ($vals as $key => $els) {
            if(strlen($key) > 0 && is_array($els)) {
              // break the url up
              $url = strpos($els['url'], '?') === 0 ? substr($els['url'], 1) : $els['url'];
              $url_parts = explode('&', $url);
              // for each part of the querystring
              foreach($url_parts as $i => $part) {
                // if it is set in our default query parameters
                foreach($default_facets_array as $d => $df) {
                  // remove it from the querystring
                  // split it on the '='
                  $df_array = explode('=', $df);
                  $part_array = explode('=', $part);
                  if(count($df_array) == 2 && count($part_array) == 2 && $df_array[0] == 'q' && $part_array[0] == 'edan_q') {
                    if($df_array[1] == $part_array[1]) {
                      unset($url_parts[$i]);
                    }
                  }
                  elseif(count($df_array) == 2 && count($part_array) == 2 && $df_array[0] == 'fqs' && $part_array[0] == 'edan_fq[]') {
                    if($df_array[1] == '["' . urldecode($part_array[1]) . '"]') {
                      unset($url_parts[$i]);
                    }
                  }
                }
              }
              $url = implode('&', $url_parts);
              $url = strpos($els['url'], '?') === 0 ? '?' . $url : $url;

              /**
              $part_array = explode('=', $part);
              if(count($part_array) == 2) {
              dpm($part_array);
              dpm(strpos($part_array[1], '"'));
              if(strpos($part_array[1], '"') === 0) {
              $part_array[1] = urlencode($part_array[1]);
              dpm($part_array);
              $mods = TRUE;
              }
              }
              if($mods) {
              $url_parts[$i] = implode('=', $part_array);
              }
              }
              dpm($url_parts);
              if($mods) {
              $url = implode('&', $url_parts);
              $url = strpos($els['url'], '?') === 0 ? '?' . $url : $url;
              }
               */

              $l = (!empty($url) ? '&' : '') . 'edan_fq[]=' . $field . ':&quot;' . urlencode($key) . '&quot;';
              $l = '<a href="' . $url . $l . '">' . $key . '</a>';
              $content .= "\n" . '<li class="facet">' . $l . ' <span>' . $els['count'] . '</span></li>';
            }
          }
        } // if we have some items for this facet
        $content .= "\n" . '</ul></li>';
      } // only show the facet if it has a label; ok if label is empty
    }
    $content .= "\n" . '</ul></div>';
  }

  return $content;
}

function edan_custom_search_facets_raw($vars, $slug) {

  /* provides an array of facets, modified according to settings in the admin UI, meaning
    1. re-ordered
    2. only the specified facets, removing any in the explicit 'remove' box
    3. renamed
  */

  $facets_raw = array();

  // TODO: Add Dates, Ranges, Queries
  // TODO: Add "base_url" var for linking things up


  // Field name replacements
  //20150126 RB Ed M. asked for re-ordering facets
  // re-order $vars['fields'] based on the order of $facet_labels
  $facet_labels = _edan_custom_search_variable_get($slug, 'facet_replacements');
  $facets_to_hide = _edan_custom_search_variable_get($slug, 'facets_hide');

  if(NULL == $facets_to_hide || !is_array($facets_to_hide)) {
    // show all by default
    $facets_to_hide = array();
  }

  if (empty($facet_labels) || !is_array($facet_labels)) {
    $facets_raw = $vars['fields'];
  }
  else {
    if (!empty($vars['fields']) && is_array($vars['fields'])) {

      // if facet order is specified, re-order accordingly
      foreach ($facet_labels as $field_key => $field_nicename) {
        // exclude any facets in the explicit 'remove facet' box
        if(array_key_exists($field_key, $vars['fields']) && !in_array($field_key, $facets_to_hide)) {
          $_label = (isset($facet_labels[$field_key])) ? $facet_labels[$field_key] : $field_key;
          $facets_raw[$field_key] = $vars['fields'][$field_key];
          $facets_raw[$field_key]['facet_label'] = $_label;
        }
      }

      // now add any remaining fields which we might not have renamed
      foreach($vars['fields'] as $field_key => $vals) {
        if(!array_key_exists($field_key, $facets_raw) && !in_array($field_key, $facets_to_hide)) {
          $facets_raw[$field_key] = $vals;
          $facets_raw[$field_key]['facet_label'] = $field_key;
        }
      }
    } // if we have some fields/facets
  }

  return $facets_raw;
}


/**
 * Theme function
 * @see edan_custom_search_theme().
 */
function edan_custom_search_active_facets($vars) {
  $content = '';

  $slug = $vars['slug'];
  $facet_labels = _edan_custom_search_variable_get($slug, 'facet_replacements');

  // Get the current URL
  //$uri = _edan_args_to_query($vars['args']);
  #$content .= '<li>' . $uri . '</li>';
  #$content .= '<li>' . var_export($vars['args'], TRUE) . '</li>';

  // Ref, 1 val is a string; multiple vals are an array
  //"fq":["topic:\\"Numismatics\\"","object_type:\\"Coins (money)\\""]

  // if we're hiding the default facets to prevent removal, do that:
  $defaults = _edan_custom_search_variable_get($slug);
  $hide_default_facets = (isset($defaults['hide_default_facets']) && $defaults['hide_default_facets'] == 1) ? TRUE : FALSE;
  $default_facets = (isset($defaults['search_params'])) ? $defaults['search_params'] : '';

  // split the text blob of default facets, on linebreaks
  $default_facets_array = explode("\r\n", $default_facets);

  // if we want to hide the default facets so they can't be removed, unset those values here.
  if(TRUE == $hide_default_facets && count($default_facets) > 0) {
    foreach($default_facets_array as $df) {
      // split it on the '='
      $df_array = explode('=', $df);
      if(count($df_array) == 2) {
        if($df_array[0] == 'q') {
          $args_q = $vars['args']['q'];

          // RB 20161201 no longer necessary- we pass boost in a different param, bq.
          /* $boost = $defaults['boost'];
          if(strlen($boost) > 0) {
            $args_q = str_replace(' OR ' . $boost, '', $args_q);
            $args_q = str_replace('"', '', $args_q);
          }
          */

          if($df_array[1] == $args_q) {
            unset($vars['args']['q']);
          }
          else {
            $vars['args']['q'] = $args_q;
          }
        }
        elseif($df_array[0] == 'fqs') {
          $fqs_hide = str_replace('[', '', $df_array[1]);
          $fqs_hide = str_replace(']', '', $fqs_hide);
          $fqs_hide = str_replace('\\', '', $fqs_hide);
          $fqs_hide = explode(',', $fqs_hide);
          $fqs = $vars['args']['fq'];
          foreach($fqs as $i => $fq) {
            if (in_array('"' . $fq . '"', $fqs_hide)) {
              unset($vars['args']['fq'][$i]);
            }
          }
        }
      }
    }
  }

  // Local units
  $local_units = _edan_search_local_units_for_solr();

  // Query/Q
  #if (isset($vars['args']['q']) && isset($vars['queries']) && !empty($vars['queries'])) {
  if (isset($vars['args']['q'])) {
    $new_args = $vars['args'];
    unset($new_args['q']);
    $new_uri = _edan_args_to_query($new_args);
    #$content .= '<li><a href="?' . $new_uri . '">' . $vars['queries'] . '</a></li>';

    // only show the search term as a facet if this is not a fixed list of objects shown for an Object Group
    if(!isset($new_args['objectGroupId']) || empty($new_args['objectGroupId']) ) {
      if ($vars['args']['q'] != '*:*') {
        $args_q = $vars['args']['q'];
        if(strlen($args_q) > 0) {
          $content .= '<li class="search-term"><a href="?' . $new_uri . '"  title="Click to remove filter">' . t('search term:') . ' "' . $args_q . '"</a></li>';
        }
      }
    }

  }

  // Facets/FQs
  #if (isset($vars['args']['fq']) && isset($vars['facets'])) {
  if (isset($vars['args']['fq'])) {
    // If there is only one FQ this will come back as a string so we make it an array here
    #if (is_string($vars['facets'])) {
    #  $vars['facets'] = array($vars['facets']);
    #}

    // Loop over the existing facets
    #foreach ($vars['facets'] as $fq) {
    foreach ($vars['args']['fq'] as $fq) {
      // Skip local units and set as
      if ($fq == $local_units) {
        $new_uri = _edan_args_to_query($vars['args']);
        $new_uri = str_replace('&edan_local=1', '', $new_uri);
        $content .= '<li class="local-unit"><a href="?' . $new_uri . '"  title="Click to remove filter">' . t('@unitName only', array('@unitName' => _edan_custom_search_variable_get($slug, 'unit_name'))) . '</a></li>';
        continue;
      }

      $new_args = $vars['args']; // Fresh copy of args
      $i = array_search($fq, $new_args['fq']);

      if (FALSE === $i) {
        continue; // Weird
      }
      else {
        unset($new_args['fq'][$i]);
      }
      $new_uri = _edan_args_to_query($new_args);
      $t = explode(':', $fq, 2);
      $p = count($t) > 1 ? $t[1] : '';
      $class = drupal_html_class($t[0]);
      if($t[0] == 'online_visual_material') {
        $p = 'online media';
      }
      elseif(strtolower($p) == '"yes"') {
        // displaying "Yes" for a selected facet isn't very useful; in this case show the facet name
        $raw_p = $t[0];
        // rename if necessary
        $p = isset($facet_labels[$raw_p]) ? $facet_labels[$raw_p] : $raw_p;
      }
      $content .= '<li class="'. $class .'"><a href="?' . $new_uri . '" title="Click to remove filter" >' . $p . '</a></li>';
    }
  }

  if (!empty($content)) {
    $facet_remove_message = strlen(_edan_custom_search_variable_get($slug, 'facet_remove_message')) > 0
      ? t(_edan_custom_search_variable_get($slug, 'facet_remove_message'))
      : t('Remove facets below:');
    return '<div class="edan-search-facet-list"><div class="facet-remove-message">' . $facet_remove_message . '</div><ul>' . $content . '</ul></div>';
  }
}

function edan_custom_search_active_facets_raw($vars) {

  $facets_raw = array('facets' => array());

  $slug = $vars['slug'];

  // Get the current URL
  $uri = _edan_args_to_query($vars['args']);

  // Ref, 1 val is a string; multiple vals are an array
  //"fq":["topic:\\"Numismatics\\"","object_type:\\"Coins (money)\\""]

  // Local units
  $local_units = _edan_search_local_units_for_solr();

  // Query/Q
  #if (isset($vars['args']['q']) && isset($vars['queries']) && !empty($vars['queries'])) {
  if (isset($vars['args']['q'])) {
    $new_args = $vars['args'];
    unset($new_args['q']);
    $new_uri = _edan_args_to_query($new_args);
    #$content .= '<li><a href="?' . $new_uri . '">' . $vars['queries'] . '</a></li>';

    // only show the search term as a facet if this is not a fixed list of objects shown for an Object Group
    if(!isset($new_args['objectGroupId']) || empty($new_args['objectGroupId']) ) {
      if ($vars['args']['q'] != '*:*') {
        $facets_raw['facets']['search_term'] = array(
          'facet_title' => 'search term:' . $vars['args']['q'],
          'uri' => '?' . $new_uri,
        );
      }
    }

  }

  // Facets/FQs
  #if (isset($vars['args']['fq']) && isset($vars['facets'])) {
  if (isset($vars['args']['fq'])) {
    // If there is only one FQ this will come back as a string so we make it an array here
    #if (is_string($vars['facets'])) {
    #  $vars['facets'] = array($vars['facets']);
    #}

    // Loop over the existing facets
    #foreach ($vars['facets'] as $fq) {
    foreach ($vars['args']['fq'] as $fq) {
      // Skip local units and set as
      if ($fq == $local_units) {
        $new_uri = _edan_args_to_query($vars['args']);
        $new_uri = str_replace('&edan_local=1', '', $new_uri);

        $facets_raw['facets']['unit_name'] = array(
          'facet_title' => t('@unitName only', array('@unitName' => _edan_custom_search_variable_get($slug, 'unit_name'))),
          'uri' => '?' . $new_uri,
        );
        continue;
      }

      $new_args = $vars['args']; // Fresh copy of args
      $i = array_search($fq, $new_args['fq']);

      if (FALSE === $i) {
        continue; // Weird
      }
      else {
        unset($new_args['fq'][$i]);
      }
      $new_uri = _edan_args_to_query($new_args);
      $t = explode(':', $fq, 2);
      $p = count($t) > 1 ? $t[1] : '';
      if($t[0] == 'online_visual_material') {
        $p = 'online media';
      }

      $facets_raw['facets'][$t[0]] = array(
        'facet_title' => $p,
        'uri' => '?' . $new_uri,
      );
    }
  }

  if (count($facets_raw) > 0) {
    $facet_remove_message = strlen(_edan_custom_search_variable_get($slug, 'facet_remove_message')) > 0
      ? t(_edan_custom_search_variable_get($slug, 'facet_remove_message'))
      : t('Remove facets below:');
    $facets_raw['facet_remove_message'] = $facet_remove_message;
  }

  return $facets_raw;

}

/**
 * Applies formatting and normalizes the facets.
 */
function _edan_custom_search_process_facets($facets, $args) {
  $out = array();

  $uri = _edan_args_to_query($args);

  // TODO: Dates, Ranges, Queries

  if (isset($facets) && is_array($facets)) {
    foreach ($facets as $field => $vals) {
      if (count($vals) < 1 || $field == 'docFldUsed') {
        continue;
      }

      $out['fields'][$field] = _edan_custom_search_process_facets_fields($vals, $uri);
    }
  }

  return $out;
}

function _edan_custom_search_process_facets_fields($fields, $uri = '') {
  $out = array();

  if (isset($fields) && is_array($fields)) {
    /*for ($i = 0; $i < count($fields); $i=$i+2) {
      $out[$fields[$i]] = array('url' => '?' . $uri, 'count' => $fields[$i+1]);
    }*/
    foreach($fields as $fld) {
      $out[$fld[0]] = array('url' => '?' . $uri, 'count' => $fld[1]);
    }
  }

  return $out;
}

/**
 * Applies formatting to the rows in a search result.
 */
function _edan_custom_search_process_rows($docs, &$opts = array(), $slug) {
  $show_remaining = $include_record_id = FALSE;
  $requested_fields = (isset($opts['variables']['field_order'])) ? $opts['variables']['field_order'] : _edan_custom_search_variable_get($slug, 'field_order');
  $local_units = (isset($opts['variables']['local_units'])) ? $opts['variables']['local_units'] : _edan_custom_search_variable_get($slug, 'local_units');

  // Are we showing the remaining fields when supplied with a list of them?
  if (empty($requested_fields) || in_array('*', $requested_fields)) {
    $show_remaining = TRUE;
  }

  // Should we copy the record_id to freetext?
  if (in_array('record_ID', $requested_fields)) {
    $include_record_id = TRUE;
  }

  // edanmdm
  $base_record_url = url(_edan_record_variable_get('menu_record_page'), array('absolute' => true, 'alias' => false ));

  // outside the loop, get some global info we'll use
  $app_id = variable_get('edan_app_id');
  $this_unit_codes = _get_unitCodes_from_applicationId($app_id);
  $external_object_groups = variable_get('ogmt_external_groups');

  foreach ($docs as $i => $_doc) {

    $er = new \EDAN\EDANRecord();
    $er->loadRecordJSON($_doc);
    $doc_images = $er->getImages();

    $doc = $_doc['content']; // Map to content
    $dnr = array_key_exists('descriptiveNonRepeating', $doc) ? $doc['descriptiveNonRepeating'] : array();
    if(empty($dnr)) {
      // set it back to _doc for newer content types
      $doc = $_doc;
    }

    //@todo: base record url, description, image

    // default, in case we don't have descriptiveNonRepeating
    $title = $er->getTitle();
    $docs[$i]['#title'] = $title;
    $record_id = $er->getRecordId();
    $docs[$i]['images'] = isset($doc_images['record_images']) ? $doc_images['record_images'] : array();
    $docs[$i]['id'] = $er->getId();

    $description_array = $er->getDescription();
    $docs[$i]['description'] = $description_array['description'];
    $docs[$i]['teaser'] = $description_array['teaser'];

    $record_type = $er->getRecordType();
    $docs[$i]['record_type'] = $record_type;

    $unit_code = $er->getUnitCode();
    $docs[$i]['unit_code'] = $unit_code;
    if (in_array($unit_code, $local_units)) {
      $docs[$i]['flags']['in_unit'] = TRUE;
    }

    // get the path/link for this EDAN record, based on this site's configuration for this record type
    // edanmdm:
    $url = '';
    switch($record_type) {
      case 'edanmdm':
        if (($base_record_url && (_edan_record_variable_get('show_within_site') == 1))
          ||
          ($base_record_url && in_array($unit_code, $local_units))) {
          $url = $base_record_url . '/' . $record_id;
        }
        else if (isset($doc['descriptiveNonRepeating']['record_link'])) {
          $url = $doc['descriptiveNonRepeating']['record_link'];
        }
        else if (isset($doc['record_link'])) {
          $url = $doc['record_link'];
        }
        break;
      case'objectgroup':
        if(module_exists('ogmt')) {
          // don't create a link if this is not an OG owned by my unit code
          // and if (external OGs are not enabled or this external OG is not included on my site)
          // clunky if like this, but easier to read
          if(empty($this_unit_codes) || !in_array($unit_code, $this_unit_codes)) {
            if(1 != _ogmt_variable_get('external_ogs') && !array_key_exists($docs[$i]['id'], $external_object_groups)) {
              continue;
            }
          }

          // build href to use alias configured in pathauto, or our default pattern
          $content_pattern = _get_default_objectgroup_path_pattern();
          $og_type_id = isset($doc['content']['groupType']) ? $doc['content']['groupType'] : '';
          $objectgroup_type = _get_objectgrouptype_by_id($og_type_id);
          if(module_exists('pathauto')) {
            // it's ok if $objectgroup_type is blank; we'll get the default if so
            $og_type = pathauto_cleanstring($objectgroup_type);
            $content_pattern = pathauto_pattern_load_by_entity('ogmt', $og_type, LANGUAGE_NONE);
          }
          $content_pattern_array = explode('/', $content_pattern);
          foreach($content_pattern_array as $k => $v) {
            switch($v) {
              case '[ogmt:ogmt_id]':
                $content_pattern_array[$k] = $docs[$i]['id'];
                break;
              case '[ogmt:ogmt_type]':
                $content_pattern_array[$k] = strlen($og_type) > 0 ? $og_type : _ogmt_variable_get('menu_base_pages');
                break;
              case '[ogmt:url]':
                $content_pattern_array[$k] = str_replace('objectgroup:', '', $doc['url']);
                break;
            }
          }
          if(strlen($content_pattern_array[$k]) == '') {
            unset($content_pattern_array[$k]);
          }
          $url = implode('/', $content_pattern_array);

        } // only if the ogmt module is installed
        break;
      default:
        // all other records, check the settings for edan record admin
        if(module_exists('edan_record_admin')) {
          //@todo
        }
        break;
    }


//@todo: update EDANRecord to get lists, freetext

    // contrib by Ha Pham 2016 Jan 05- provide separate title and uri
    $link = '';
    if(!isset($record_id)) {
      $record_id = isset($doc['descriptiveNonRepeating']['record_ID']) ? $doc['descriptiveNonRepeating']['record_ID'] : '';
    }
    $docs[$i]['record_id'] = $record_id;

    // Make the title linkable
    $docs[$i]['#title_plain'] = $title;
    if(isset($url) && strlen(trim($url)) > 0) {
      $docs[$i]['#title'] = l($title, $url);
      $link = drupal_parse_url($url);

      if(is_array($link) && array_key_exists('path', $link)) {
        if( (strlen($link['path']) < 4)
          || ((strlen($link['path']) >= 4 && substr($link['path'],0,4) != 'http')
          && (strlen($link['path']) >= 4 && substr($link['path'],0,1) != '/'))
        ) {
          $link['path'] = '/' . $link['path'];
        }
      }
    }
    else {
      $docs[$i]['#title'] = $title;
    }
    $docs[$i]['#title_link'] = $link;

    // Copy the record id into freetext
    if ($include_record_id) {
      $doc['freetext']['record_ID'] = array(
        array(
          'content' => $record_id,
          'label' => 'record_ID'
        )
      );
    }

    // Freetext reordering
    if (in_array('0', $requested_fields)) {
      foreach ($docs as $i => $doc) {
        $docs[$i]['freetext'] = array();
      }
    }
    else {
      $used_fields = array();
      $new_ft = array(); // Holds the current working row
      foreach ($requested_fields as $rfield) {
        if (isset($doc['freetext'][$rfield])) {
          _edan_custom_search_replace_labels($doc['freetext'][$rfield], $slug);
          $new_ft[$rfield] = $doc['freetext'][$rfield];
          $used_fields[] = $rfield;
        }
      }

      if ($show_remaining && isset($doc['freetext'])) {
        foreach ($doc['freetext'] as $field => $vals) {
          if (!in_array($field, $used_fields)) {
            _edan_custom_search_replace_labels($vals, $slug);
            $new_ft[$field] = $vals;
          }
        }
      }
      // Update $docs with the new row
      $docs[$i]['content']['freetext'] = $new_ft;

    } // if we have some requested fields


    // Add in options
    if (isset($opts['lists'])) {
      if (in_array($_doc['url'], $opts['lists'])) {
        $docs[$i]['flags']['in_list'] = TRUE;
      }
      else {
        // $_doc['url'] might be: edanmdm:nmnhbotany123456
        // $opts['lists'] only has values like: nmnhbotany123456
        $t = explode(':', $_doc['url'], 2);
        if(count($t) == 2) {
          if (isset($t[1]) && in_array($t[1], $opts['lists'])) {
            $docs[$i]['flags']['in_list'] = TRUE;
          }
        }
      }
    }

  }


  return $docs;
}

/**
 * Replaces the label if one is available.
 * TODO: This can be optimized as a callback/array walk
 */
function _edan_custom_search_replace_labels(&$vals, $slug) {
  if (empty($vals)) {
    return;
  }

  if (!isset($GLOBALS['edan_search']['replacement_labels'])) {
    $lr = _edan_custom_search_variable_get($slug, 'label_replacements');
    $arr = array();
    foreach ($lr as $k => $v) {
      $arr[ strtoupper($k) ] = $v;
    }
    $GLOBALS['edan_search']['replacement_labels'] = $arr;
  }

  /*
  array(1) {
    [0]=> array(2) {
      ["content"]=> string(9) "Ethnology"
      ["label"]=> string(5) "Topic"
    }
  }
  */

  foreach ($vals as $key => $val) {
    if (isset($val['label'])) {
      $upper = strtoupper($val['label']);
      if (isset($GLOBALS['edan_search']['replacement_labels'][$upper])) {
        $vals[$key]['label'] = $GLOBALS['edan_search']['replacement_labels'][$upper];
      }
    }
  }
}

/**
 * Gets search results back for a search.
 *
 * TODO: Fix theme() usage
 */
// give other modules the ability to theme results with their own template
function _edan_custom_search_get_results($args = array(), &$opts = array(), $template_name='edan_custom_search_results', $slug) {
  // TODO: Arg validation?

  $content = '';

  if(!isset($args['q']) || strlen(trim($args['q'])) == 0 ) {
    $args['q'] = '*:*';
  }

  if(empty($args)) {
    return '';
  }

  $pager_params = array();
  $rpp = (isset($opts['variables']['results_per_page'])) ? $opts['variables']['results_per_page'] : _edan_custom_search_variable_get($slug, 'results_per_page');
  $args['rows'] = $rpp;

  //$querystring_args = drupal_get_query_parameters();

  // Git 10b79b1e30
  if(array_key_exists('pageId', $args) || array_key_exists('objectGroupId', $args) || array_key_exists('plainsearch', $opts)) {
    $results = _edan_custom_search_execute_search($args, $opts, $slug);
  }
  else {
    $collections_results = _edan_custom_search_execute_collectionssearch($args, $opts, $slug);
    $results = $collections_results;
    $results['response'] = $collections_results; // make it look like standard search results by putting it in the 'response' param
  }

  // This block reconciles the new format with the old format for results coming from
  // the newer metadata/v1.0 endpoints
  // v1.0 items, v1.1 rows
  $results_rows = isset($results['rows']) ? $results['rows'] : $results['items'];
  if (isset($results_rows) && is_array($results_rows)) {
    $results['response']['numFound'] = $results['numFound'];
    $results['response']['start'] = 0; // TODO: is the new format paged?
    $results['response']['docs'] = array();
    foreach($results_rows as $item) {
      $results['response']['docs'][] = $item;//$item['content'];
    }
    unset($results['items']);
    unset($results['rows']);
  }

  if (!isset($results['response']['numFound']) || $results['response']['numFound'] == 0) {
    $content = (isset($opts['variables']['results_empty_message'])) ? $opts['variables']['results_empty_message'] : _edan_custom_search_variable_get($slug, 'results_empty_message');
  } else {

    // Set up our theme vars
    $vars = array(
      'numFound' => $results['response']['numFound'],
      'start' => $results['response']['start'],
      'docs' => _edan_custom_search_process_rows($results['response']['docs'], $opts, $slug),
      'docs_raw' => $results['response']['docs'],
      'tabs' => NULL,
      'tabs_array' => array(),
      'facets' => NULL,
      'active_facets' => NULL,
      'facets_raw' => NULL,
      'active_facets_raw' => NULL,
      'pager' => NULL,
      'container_class' => 'edan-custom-search-results',
      'results_summary' => '',
      'results_class' => '',
      'result_class' => '',
      'listType' => -1, // default to no list type
      'search_name' => $slug,
    );

    if(isset($opts['listType'])) {
      $vars['listType'] = $opts['listType'] == 1 ? 1 : 0; // 0 = records, 1 = saved search
    }

    // Facet mode determines how/if we handle facets
    $facet_mode = (isset($opts['variables']['facets'])) ? $opts['variables']['facets'] : _edan_custom_search_variable_get($slug, 'facets');

    $tpl_slug = str_replace('-', '_', $slug);
    /*
    if($facet_mode == 'tpl') {
      $active_facets = 'edan_custom_search_active_facets';
    }
    elseif($facet_mode == 'tpl_custom') {
      $active_facets = 'edan_custom_search_active_' . $tpl_slug . '_facets';
    }
    */
    if (isset($results['facets'])) {
    // Add active facets
    $vars['active_facets'] = theme(
      'edan_custom_search_active_facets',
      array(
        'args' => $args,
          'queries' => NULL,
          // Old: (isset($results['responseHeader']['params']['q'])) ? $results['responseHeader']['params']['q'] : '',
          'facets' => NULL,
          // Old: (isset($results['responseHeader']['params']['fq'])) ? $results['responseHeader']['params']['fq'] : '',
        'slug' => $slug,
      )
    );

    $vars['active_facets_raw'] = edan_custom_search_active_facets_raw(array(
        'args' => $args,
          'queries' => NULL,
          // Old: (isset($results['responseHeader']['params']['q'])) ? $results['responseHeader']['params']['q'] : '',
          'facets' => NULL,
          // Old: (isset($results['responseHeader']['params']['fq'])) ? $results['responseHeader']['params']['fq'] : '',
        'slug' => $slug,
      )
    );

    // Add facets if they're being shown in the tpl
    if ($facet_mode != 'none') {
      if (isset($results['facets']) && !empty($results['facets'])) {

        // get the raw facets:
        $vars['facets_raw'] = edan_custom_search_facets_raw(_edan_custom_search_process_facets($results['facets'], $args), $slug);

        // pass raw facets to the theming function:
          $themed_facets = theme('edan_custom_search_facets', array(
            'facets_raw' => $vars['facets_raw'],
            'slug' => $slug
          ));

        if ($facet_mode == 'tpl' || $facet_mode == 'tpl_default') {
          $vars['container_class'] = 'edan-search-results-with-facets';
          $vars['facets']  = $vars['active_facets'] . "\n";
          $vars['facets'] .= $themed_facets;
          }
          else {
            if ($facet_mode == 'block') {
          $GLOBALS['edan_search']['facet_block_content']  = $vars['active_facets'] . "\n";
          $GLOBALS['edan_search']['facet_block_content'] .= $themed_facets;
        }
      }
    }
      }

    // Add "Mini fields" if set
    $mf = (isset($opts['variables']['mini_fields'])) ? $opts['variables']['mini_fields'] : _edan_custom_search_variable_get($slug, 'mini_fields');
    $mfactive = (bool) (!empty($mf));

    if ($mfactive) {
      drupal_add_js(array('edan_search' => array('mini_fields' => ($mf))), 'setting');
    }
    }


    // Tabs
    if (isset($opts['theme']['show_tabs']) && $opts['theme']['show_tabs'] === TRUE) {
      $tab_data = _edan_custom_search_get_tabs($args, $opts, $results['numFound'], $slug);
      $vars['tabs'] = $tab_data['tabs'];
      $vars['tabs_array'] = $tab_data['tabs_array'];
    }
    $vars['pager'] = '';
    if (!isset($opts['hide_pager']) || $opts['hide_pager'] == FALSE) {
    // Pager
    $pager_vars = array(
      'parameters' => $pager_params,
    );
    pager_default_initialize($results['numFound'], $rpp);
    $vars['pager'] = theme('pager', $pager_vars);
    }


    // TODO: Update this to use a consolidated class array, just need a way to override
    if (isset($opts['theme']['results_class_add'])) {
      $vars['results_class'] .= ' ' . $opts['theme']['results_class_add'];
    }
    if (isset($opts['theme']['result_class_add'])) {
      $vars['result_class'] .= ' ' . $opts['theme']['result_class_add'];
    }

    // Add the results summary
    $rcm = (isset($opts['variables']['results_count_message'])) ? $opts['variables']['results_count_message'] : _edan_custom_search_variable_get($slug, 'results_count_message');
    $vars['results_summary'] = t($rcm, array('@count' => number_format($results['numFound'])));

    // Theme results
    if (isset($opts['theme']['custom_callback']) && function_exists($opts['theme']['custom_callback'])) {
      $func = $opts['theme']['custom_callback'];
      $content = $func($vars, $opts);
    } else {
      // if the custom template exists, use it; otherwise use the default
      $content = theme($template_name, $vars); // was edan_custom_search_results
    }

  }

  return $content;
}

/**
 * Returns tabs used to display different result counts.
 */
function _edan_custom_search_get_tabs($args = array(), &$opts = array(), $count = 0, $slug) {
//@todo! update to use custom search settings, not generic settings

  $local_units = _edan_search_local_units_for_solr();
  $local_units_only = in_array($local_units, $args['fq']);

  $new_args = $args;
  $new_args['fq'][] = $local_units;
  $local_href = _edan_args_to_query($new_args);
  $all_href = str_replace('&edan_local=1', '', _edan_args_to_query($args));

  $all_count = $local_count = $count;

  // New search: we need to query for the tab we're not active on to get a count
  $new_args = $args;
  $new_args['rows'] = 0;
  $new_args['facet'] = FALSE;

  // Process extra search and add classes
  // Git 10b79b1e30
  $local_class = $all_class = ''; // $collections_class = '';
  if ($local_units_only) {
    $local_class = ' class="active"';
  }
  else {
    $querystring_args = drupal_get_query_parameters();
    // Git 10b79b1e30
    //if(_edan_custom_search_variable_get($slug, 'menu_results_collections_tab') == 1 && isset($querystring_args['collections'])) {
    //  $collections_class = ' class="active"';
    //}
    //else {
    $all_class = ' class="active"';
    //}
  }

  // Local search count
  if (!in_array($local_units, $args['fq'])) {
    $new_args['fq'][] = $local_units;
  }

  // All search count- make sure we remove fq for localunits from the args, if it exists
  $i = NULL;
  foreach($args['fq'] as $k => $v) {
    if($v== $local_units) {
      $i=$k;
      break;
    }
  }
  if(NULL !== $i) {
    unset($args['fq'][$i]);
  }

  if(!isset($args['q']) || strlen(trim($args['q'])) == 0 ) {
    $args['q'] = '*:*';
  }
  if(!isset($new_args['q']) || strlen(trim($new_args['q'])) == 0 ) {
    $new_args['q'] = '*:*';
  }

  // Git 10b79b1e30
  // if passing a pageId or objectGroupId, we are forced to use the Universal Search
  if(array_key_exists('pageId', $new_args) || array_key_exists('objectGroupId', $new_args) || array_key_exists('plainsearch', $opts)) {
    $local_results = _edan_custom_search_execute_search($new_args, $opts, $slug);
    $local_count = (isset($local_results['numFound'])) ? $local_results['numFound'] : 0;
    $all_results = _edan_custom_search_execute_search($args, $opts, $slug);
  }
  else {
    $local_results = _edan_custom_search_execute_collectionssearch($new_args, $opts, $slug);
    $local_count = (isset($local_results['numFound'])) ? $local_results['numFound'] : 0;
    $all_results = _edan_custom_search_execute_collectionssearch($args, $opts, $slug);
  }
  $all_count = (isset($all_results['numFound'])) ? $all_results['numFound'] : 0;

  $tab_order = _edan_custom_search_variable_get($slug, 'menu_results_tab_order');

  $content = '<div class="tabs"><ul class="tabs primary">';
  if($tab_order == 1) {
    $tab_array[] = '<a href="?' . $local_href . '">' . t('Museum Collections') . ' (' . $local_count . ')</a>';
    $tab_array[] = '<a href="?' . $all_href . '">' . t('All Smithsonian Collections') . ' (' . $all_count . ')</a>';

    $content .= '<li' . $local_class . '><a href="?' . $local_href . '">' . t('Museum Collections') . ' (' . $local_count . ')</a></li>';
    $content .= '<li' . $all_class . '><a href="?' . $all_href . '">' . t('All Smithsonian Collections') . ' (' . $all_count . ')</a></li>';
  }
  else {
    $tab_array[] = '<a href="?' . $all_href . '">' . t('All Smithsonian Collections') . ' (' . $all_count . ')</a>';
    $tab_array[] = '<a href="?' . $local_href . '">' . t('Museum Collections') . ' (' . $local_count . ')</a>';

    $content .= '<li' . $all_class . '><a href="?' . $all_href . '">' . t('All Smithsonian Collections') . ' (' . $all_count . ')</a></li>';
    $content .= '<li' . $local_class . '><a href="?' . $local_href . '">' . t('Museum Collections') . ' (' . $local_count . ')</a></li>';
  }

  // Git 10b79b1e30
  /*
    if(_edan_custom_search_variable_get($slug, 'menu_results_collections_tab') == 1) {
      //$opts['collections_search'] = TRUE;
      $collections_results = _edan_custom_search_execute_collectionssearch($new_args, $opts);
      $collections_count = (isset($collections_results['numFound'])) ? $collections_results['numFound'] : 0;
      $content .= '<li' . $collections_class . '><a href="?' . $all_href . '&collections">' . t('Collections Results') . ' (' . $collections_count . ')</a></li>';
    }

   */
  $content .= '</ul></div>';

  return array('tabs' => $content, 'tabs_array' => $tab_array);
  //return $content;
}

/**
 * Gets the current edan_q
 */
function _edan_custom_search_get_query($slug, $default = '*:*', &$opts = array()) {
  $arr = array();
  $arr['q'] = _edan_search_get_param('edan_q', $default);

  $arr['rows'] = (isset($opts['variables']['results_per_page'])) ? $opts['variables']['results_per_page'] : _edan_custom_search_variable_get($slug, 'results_per_page');
  $get_page = _edan_search_get_param('page', NULL);
  if (isset($get_page)) { // $_GET['page'])) {
    $arr['start'] = $get_page * $arr['rows']; // $_GET['page'] *
  }
  else {
    $arr['start'] = 0;
  }

  $arr['type'] = _edan_search_get_param('edan_type'); // isset($_GET['edan_type']) ? $_GET['edan_type'] : NULL;

  /*
  // From URL
  $arr['rows'] = filter_input(INPUT_GET, 'edan_rows', FILTER_VALIDATE_INT, array(FILTER_NULL_ON_FAILURE));
  $arr['start'] = filter_input(INPUT_GET, 'edan_start', FILTER_VALIDATE_INT, array(FILTER_NULL_ON_FAILURE));
  */

  // FQs
  $fqs = array();

  // A special FQ: unit code
  $get_edan_local = _edan_search_get_param('edan_local');
  if (isset($get_edan_local) && $get_edan_local == '1') {
    //if (isset($_GET['edan_local']) && $_GET['edan_local'] == '1') {
    $fqs[] = _edan_search_local_units_for_solr();
  }

  /*
  // Original handling: edan_fq=1&edan_fq=2
  $raw = explode('&', $_SERVER['QUERY_STRING']);
  foreach ($raw as $fq) {
    if (strpos($fq, '=')) {
      list($name, $value) = explode('=', $fq);
      $name = urldecode($name);
      $value = urldecode($value);
      if ($name == 'edan_fq') {
        $fqs[] = $value;
      }
    }
  }
  */
  // New handling: php native arrays: edan_fq[]=1&edan_fq[]=2
  $get_edan_fq = _edan_search_get_param('edan_fq', array());
  if (isset($get_edan_fq)) {
    if (!is_array($get_edan_fq)) {
      $_GET['edan_fq'] = array($get_edan_fq);
      $get_edan_fq = array($get_edan_fq);
    }
    foreach ($get_edan_fq as $fq) {
      $fqs[] = $fq;
    }
  }
  /*
  if (isset($_GET['edan_fq'])) {
    if (!is_array($_GET['edan_fq'])) {
      $_GET['edan_fq'] = array($_GET['edan_fq']);
    }

    foreach ($_GET['edan_fq'] as $fq) {
      $fqs[] = $fq;
    }
  }
  */

  $arr['fq'] = $fqs;

  return $arr;
}

/**
 * Executes an EDAN search
 *
 * @see EDANInterface()
 */
function _edan_custom_search_execute_search($args, &$opts = array(), $slug) {
  $edan_server = variable_get('edan_server_url', 'http://edan.si.edu/');
  $edan_auth_key = variable_get('edan_auth_key', '');
  $edan_tier_type = variable_get('edan_tier_type', '0');
  $edan_app_id = variable_get('edan_app_id', '');

  $edan = new EDAN\EDANInterface($edan_server, $edan_app_id, $edan_auth_key, $edan_tier_type);

  // $filter = array('online_visual_material:true','record_ID:saam_1997.108.62');
  $filter = array();

  $uri = "wt=json";
  $uri_facets = '';

  $argsq = '';
  if (isset($args['q'])) {
    // if the user put the terms in quotes, strip the quotes but leave the terms alone

    // else clean it up
    if(strlen($args['q']) > 0) {
      $argsq = $args['q'];
      if(substr($argsq, 0, 1) == '"' && substr($argsq, -1, 1) == '"') {
        if(strlen($argsq) == 2) {
          $argsq = '';
        }
        else {
          $argsq = substr($argsq, 1, strlen($argsq) - 2);
        }
      }
      else {
        $argsq = str_replace(' ', '+', $args['q']);
      }
    }
    $uri .= '&q=' . urlencode($argsq);
  }

  if (isset($args['rows'])) {
    $uri .= '&rows=' . $args['rows'];
  }

  // iter of bq array
  if (isset($args['bq'])) {
    foreach($args['bq'] as $bq) {
      $uri .= '&bq=' . urlencode($bq);
    }
  }
  /* was:
    if (isset($args['bq'])) {
      $uri .= '&bq=' . $args['bq'];
    }
  */

  if (isset($args['start'])) {
    $uri .= '&start=' . $args['start'];
  }

  // Added sort (ghalusa - 2016-10-07)
  if (isset($args['sort'])) {
    $uri .= '&sort=' . urlencode($args['sort']);
  }

  // Added facet.field (ghalusa - 2016-10-07)
  if (isset($args['facet.field'])) {
    $uri .= '&facet.field=' . $args['facet.field'];
  }

  // Added facet.mincount (ghalusa - 2016-10-07)
  if (isset($args['facet.mincount'])) {
    $uri .= '&facet.mincount=' . $args['facet.mincount'];
  }

  // Added facet.limit (ghalusa - 2016-10-07)
  if (isset($args['facet.limit'])) {
    $uri .= '&facet.limit=' . $args['facet.limit'];
  }

  if (isset($args['type'])) {
    $uri .= '&type=' . $args['type'];
  }
  else {
    // use defaults
    $record_type = _edan_custom_search_variable_get($slug, 'record_type');
    if(strlen(trim($record_type)) > 0) {
      //was only this: $args['fq'][] = 'type:' . $record_type;
      // use specified record type(s)
      // record types are separated by spaces in the admin UI
      $record_type_array = explode(' ', $record_type);
      // connect them with ORs
      $record_type = 'type:' . implode(' OR type:', $record_type_array);
      $args['fq'][] = $record_type;
    }
  }

  // iter of fq array
  $_fqs = array();
  if (isset($args['fq'])) {
    foreach ($args['fq'] as $fq) {
      if (strpos($fq, ':') !== FALSE) {
        list($name, $value) = explode(':', $fq, 2);
        #$uri .= '&fq=' . $name . ':' . urlencode($value);
        $_fqs[] = $name . ':' . $value;
      }
    }
  }

  if (!empty($_fqs)) {
    $uri .= '&fqs=' . urlencode(json_encode($_fqs));
  }

  // Lists
  if (isset($args['listid'])) {
    $uri .= 'qt=myListSearch&sl.id=' . $args['listid'];
  }

  // Facets
  if (isset($args['facet']) && $args['facet'] === TRUE) {
    $uri_facets .= '&facet=true';
    #$uri_facets .= '&facet.mincount=1';
    #$uri_facets .= '&facet.limit=25';

    if (!isset($args['facet.field']) || empty($args['facet.field'])) {
      #$uri_facets .= '&facet.field=data_source&facet.field=topic&facet.field=object_type&facet.field=date&facet.field=place&facet.field=name&facet.field=culture&facet.field=language';
    }
  }

  // NEW:
  // http://edantest.si.edu/metadata/v1.1/metadata/objectlists.htm?applicationId=OGMT_TEST&listName=OGMT_TEST:12:128
  // http://edantest.si.edu/metadata/v1.1/metadata/objectlists.htm?applicationId=OGMT_TEST&listName=OGMT_TEST:12:133
  // Can also accept objectGroupUrl and pageUrl
  // Supports listType=0 and listType=1

  /*
  start,rows,q
  facet=bool
  fqs=json->array("topic:Monkey")
  */

  // Object Group Id
  if (isset($args['objectGroupId']) && (!isset($args['q']) || empty($args['q']) || $args['q'] == '*:*' ) ) {
    /*
    objectListingMetadata
    /ogmt/webservices/objectListingMetadata.htm?objectGroupId=12
    objectListingMetadata with metadata...
    /ogmt/webservices/objectListingMetadata.htm?objectGroupId=12&facet=true.
    */

    #$service = 'ogmt/webservices/objectListingMetadata.htm';
    if (isset($opts['variables']['admin_lists']) && $opts['variables']['admin_lists'] === TRUE) {
      $service = 'ogmt/v1.1/adminogmt/getObjectListingMetadata.htm';
    } else {
      if(isset($args['unitCode'])) {
        $uri .= '&unitCode=' . $args['unitCode'];
      }
      $service = 'metadata/v1.1/metadata/getObjectLists.htm';
    }

    /* */
    $uri .= '&objectGroupId=' . $args['objectGroupId'];
    if (isset($args['pageId'])) {
      $uri .= '&pageId=' . $args['pageId'];
    }
    /**/

    /*
    $list_name = $edan_app_id . ':' . $args['objectGroupId'];
    if (isset($args['pageId'])) {
      $list_name .= ':' . $args['pageId'];
    } else {
      $list_name .= ':0';
    }
    $uri .= '&listName=' . $list_name;
    */

    // RB 20161111 - AG says do not pass applicationId
    //$uri .= '&applicationId=' . $edan_app_id;

    if (isset($args['facet']) && $args['facet'] === TRUE) {
      $uri .= '&facet=true';
    }
    else {
      $uri .= '&facet=false';
    }
    $uri_facets = ''; // Clear
  }
  else {
    $service = 'metadata/v1.1/metadata/search.htm'; //metadataService';
  }

  // Add facets
  $uri .= $uri_facets;

  #$uri = 'type=damsmdm&url=AAA-jacqself00002-002320';
  #$service = 'content/v1.1/content/contentUrl.htm';
  $info = '';
  $results = $edan->sendRequest($uri, $service, FALSE, $info);

//dpm($service . '?' . $uri);
//dpm($args);
//dpm(json_decode($results, TRUE));

  $edan_debug = _edan_custom_search_variable_get($slug, 'debug');
  if($edan_debug) {
    watchdog('EDAN Debug',
      '%service?%uri <br /><br />Results<br />%results',
      array(
        '%service' => $service,
        '%uri' => $uri,
        '%results' => $results,
      ),
      WATCHDOG_DEBUG);
  }

  if(module_exists('devel') && isset($_GET['dpm']) && user_access('access devel information')) {
    dpm($uri);
    dpm($info);
    dpm(json_decode($results, TRUE));
  }
  if (_edan_search_can_dump() || isset($opts['dump'])) {
    drupal_set_message(var_export($service . '?' . $uri, TRUE));
    drupal_set_message(var_export($info, TRUE));
    drupal_set_message(var_export($results, TRUE));
  }

  if (!empty($info) && $info['http_code'] != 200) {
    drupal_set_message('An error occurred when contacting the EDAN API. (' . $info['http_code'] . ').');
    watchdog('EDAN',
      'HTTP Error %err: %service?%uri <br /><br />Results<br />%results',
      array(
        '%err' => $info['http_code'],
        '%service' => $service,
        '%uri' => urldecode($uri),
        '%results' => $results,
      ),
      WATCHDOG_WARNING);
    return FALSE;
  }
  return json_decode($results, TRUE);
}

/**
 * Executes an EDAN search
 *
 * @see EDANInterface()
 */
function _edan_custom_search_execute_collectionssearch($args, &$opts = array(), $slug) {
  $edan_server = variable_get('edan_server_url', 'http://edan.si.edu/');
  $edan_auth_key = variable_get('edan_auth_key', '');
  $edan_tier_type = variable_get('edan_tier_type', '0');
  $edan_app_id = variable_get('edan_app_id', '');

  $edan = new EDAN\EDANInterface($edan_server, $edan_app_id, $edan_auth_key, $edan_tier_type);

  // $filter = array('online_visual_material:true','record_ID:saam_1997.108.62');
  $filter = array();

  $uri = "wt=json";
  $uri_facets = '';

  if (isset($args['q'])) {
    $uri .= '&q=' . urlencode(str_replace(' ', '+', $args['q']));
  }

  if (isset($args['rows'])) {
    $uri .= '&rows=' . $args['rows'];
  }

  // iter of bq array
  if (isset($args['bq'])) {
    foreach($args['bq'] as $bq) {
      $uri .= '&bq=' . urlencode($bq);
    }
  }
  /* was:
    if (isset($args['bq'])) {
      $uri .= '&bq=' . $args['bq'];
    }
  */

  if (isset($args['start'])) {
    $uri .= '&start=' . $args['start'];
  }

  // Added sort (ghalusa - 2016-10-04)
  if (isset($args['sort'])) {
    $uri .= '&sort=' . urlencode($args['sort']);
  }

  // Added facet.field (ghalusa - 2016-10-04)
  if (isset($args['facet.field'])) {
    $uri .= '&facet.field=' . $args['facet.field'];
  }

  // Added facet.mincount (ghalusa - 2016-10-04)
  if (isset($args['facet.mincount'])) {
    $uri .= '&facet.mincount=' . $args['facet.mincount'];
  }

  // Added facet.limit (ghalusa - 2016-10-04)
  if (isset($args['facet.limit'])) {
    $uri .= '&facet.limit=' . $args['facet.limit'];
  }

  /*  if (isset($args['type'])) {
      $uri .= '&type=' . $args['type'];
    }
    else {
      // use defaults
      $record_type = _edan_custom_search_variable_get($slug, 'record_type');
      if(strlen(trim($record_type)) > 0) {
        // use specified record type
        $args['fq'][] = 'type:' . $record_type;
      }
    }
  */
  // iter of fq array
  $_fqs = array();
  if (isset($args['fq'])) {
    foreach ($args['fq'] as $fq) {
      if (strpos($fq, ':') !== FALSE) {
        list($name, $value) = explode(':', $fq, 2);
        #$uri .= '&fq=' . $name . ':' . urlencode($value);
        $_fqs[] = $name . ':' . $value;
      }
    }
  }
  if (!empty($_fqs)) {
    $uri .= '&fqs=' . urlencode(json_encode($_fqs));
  }

  // Facets
  if (isset($args['facet']) && $args['facet'] === TRUE) {
    $uri_facets .= '&facet=true';
    #$uri_facets .= '&facet.mincount=1';
    #$uri_facets .= '&facet.limit=25';

    if (!isset($args['facet.field']) || empty($args['facet.field'])) {
      #$uri_facets .= '&facet.field=data_source&facet.field=topic&facet.field=object_type&facet.field=date&facet.field=place&facet.field=name&facet.field=culture&facet.field=language';
    }
  }

  /*
  start,rows,q
  facet=bool
  fqs=json->array("topic:Monkey")
  */


  // -> metadata/search.htm has more than just type=edanmdm records
  $service = 'metadata/v1.1/collections/search.htm';

  // Add facets
  $uri .= $uri_facets;

  #$uri = 'type=damsmdm&url=AAA-jacqself00002-002320';
  #$service = 'content/v1.1/content/contentUrl.htm';
  $info = '';
  $results = $edan->sendRequest($uri, $service, FALSE, $info);
//dpm($service . '?' . $uri);
//dpm($args);
//dpm($results);
  $edan_debug = _edan_custom_search_variable_get($slug, 'debug');
  if($edan_debug) {
    watchdog('EDAN Debug',
      '%service?%uri <br /><br />Results<br />%results',
      array(
        '%service' => $service,
        '%uri' => $uri,
        '%results' => $results,
      ),
      WATCHDOG_DEBUG);
  }

  if(module_exists('devel') && isset($_GET['dpm']) && user_access('access devel information')) {
    dpm($uri);
    dpm($info);
    dpm(json_decode($results, TRUE));
  }
  if (_edan_search_can_dump() || isset($opts['dump'])) {
    drupal_set_message(var_export($service . '?' . $uri, TRUE));
    drupal_set_message(var_export($info, TRUE));
    drupal_set_message(var_export($results, TRUE));
  }

  if (!empty($info) && $info['http_code'] != 200) {
    drupal_set_message('An error occurred when contacting the EDAN API. (' . $info['http_code'] . ').');
    watchdog('EDAN',
      'HTTP Error %err: %service?%uri <br /><br />Results<br />%results',
      array(
        '%err' => $info['http_code'],
        '%service' => $service,
        '%uri' => urldecode($uri),
        '%results' => $results,
      ),
      WATCHDOG_WARNING);
    return FALSE;
  }

  return json_decode($results, TRUE);
}


/**
 * Wrapper for variable_get()
 *
 * @see variable_get()
 */
function _edan_custom_search_variable_get($custom_search_id, $key = NULL) {

  $custom_search_id_slug = make_slug($custom_search_id);
  $defaults = _edan_custom_search_variable_defaults();

  $custom_searches = variable_get('edan_custom_searches');
  $variables = isset($custom_searches[$custom_search_id_slug])
    ? $custom_searches[$custom_search_id_slug]
    : $defaults;

  if (!empty($key)) {
    return isset($variables[$key]) ? $variables[$key] : NULL;
  }

  return $variables;
}

function _edan_custom_search_variable_defaults($key = NULL) {
  $defaults = array(
    'custom_results_title' => '',
    'endpoint' => '',
    'search_params' => '',
    'create_block' => '',
    'create_page' => '',
    'hide_search_form' => FALSE,
    'hide_default_facets' => TRUE,
    'hide_all_facets' => TRUE,
    'menu_results_page' => '',
    'menu_results_title' => '',
    'menu_results_tabs' => FALSE,
    'show_results_on_load' => TRUE,
    'menu_results_tab_order' => FALSE,
    'menu_results_tab_objectgroups' => FALSE,
    'results_per_page' => 10,
    'results_count_message' => 'Your search found @count result(s).',
    'field_order' => array('*'),
    'label_replacements' => array(),
    //'results_empty_redirect' => '',
    //'results_empty_message' => 'Your search found no results.',
    'mini_fields' => array(),
    'facets' => 'tpl',
    'facet_replacements' => array(
      'data_source' => 'data source',
      'online_media_type' => 'online media type',
      'object_type' => 'object type',
      'online_visual_material' => 'online visual material',
      'unit_code' => 'unit code',
      'onPhysicalExhibit' => 'on exhibition',
    ),
    'facet_remove_message' => '',
    'default_to_online_media' => TRUE,
    'facets_hide' => array(),
    'default_to_local_units' => TRUE,
    'local_units' => array(),
    'unit_name' => '',
    'record_type' => '',
    'debug' => FALSE,
  );

  if (!empty($key) && isset($defaults[$key])) {
    return $defaults[$key];
  }

  return $defaults;
}

function make_slug($string) {
  // Replace with dashes anything that isn't A-Z, numbers, dashes, or underscores.
  return strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $string));
}