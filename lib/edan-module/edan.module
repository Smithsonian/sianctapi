<?php

/**
 * edan.module
 *
 * @version 2.4
 */

/**
 * Implements hook_menu().
 **/
function edan_menu() {
  $items['admin/config/services/edanserver'] = array(
    'title' => 'EDAN Connection',
    'description' => 'Configuration for connecting to the EDAN Web Services',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edan_server_form'),
    'access arguments' => array('administer edan configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
/*
  $items[EDAN_ADMIN_FILES_PATH] = array(
    'page callback' => 'edan_image_picker',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    //'file' => 'includes/menu.files.inc',
    'type' => MENU_CALLBACK,
  );
*/
  return $items;
}

/**
 * Implements hook_permission().
 */
function edan_permission() {
  return array(
    'administer edan configuration' =>  array(
      'title' => t('Administer EDAN configuration'),
    ),
    'view edan configuration' =>  array(
      'title' => t('View EDAN configuration'),
    ),
  );
}
  
/**
 * Form function, called by drupal_get_form() 
 * in edan_menu().
 */
function edan_server_form($form, &$form_state) {

  $form['edan_server_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL of EDAN.'),
    '#default_value' => variable_get('edan_server_url', 'https://edan.si.edu/'),
    '#size' => 50,
    '#maxlength' => 50,
    '#description' => t('The Base URL supplied by the EDAN group for connecting to the EDAN Services.'),
    '#required' => TRUE,
  );
  $form['edan_app_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Application ID to use.'),
    '#default_value' => variable_get('edan_app_id', 'YOUR_APP_ID'),
    '#size' => 20,
    '#maxlength' => 20,
    '#description' => t('The Application ID supplied by the EDAN group for connecting to the EDAN Services.'),
    '#required' => TRUE,
  );
  $form['edan_auth_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Authentication Key'),
    '#size' => 50,
    '#default_value' => variable_get('edan_auth_key', ''),
    '#maxlength' => 200,
    '#description' => t('The authentication key used in Tier II requests.'),
    '#required' => FALSE,
  );
  $form['edan_tier_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select Tier Authentication'),
    '#description' => t('Specify tier authentication level'),
    '#options' => array(
    t('Tier I'),
    t('Tier II'),
    ),
    '#default_value' => variable_get('edan_tier_type', 'Tier I'),
    '#required' => TRUE,
   );
  
  return system_settings_form($form);

}

/**
 * Implements validation from the Form API.
 * 
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state 
 *   during processing.
 */
function edan_server_form_validate($form, &$form_state){
  $edan_tier_type = $form_state['values']['edan_tier_type'];
  $edan_auth_key = $form_state['values']['edan_auth_key'];

  $lastpos = substr($form_state['values']['edan_server_url'], -1);
  if($lastpos !== '/') {
    form_set_error('edan_server_url', t('Sorry but you must enter a slash ("/") at the end of the Base URL.'));
  }

  if ($edan_tier_type == 1 && (strlen($edan_auth_key) == 0) ){
    form_set_error('edan_auth_key', t('When using Tier II authentication you must specify an authentication key.'));
  }
}

function _edan_get_param($name, $default = NULL) {
  if (!isset($_GET[$name])) {
    return $default;
  } else {
    if(is_array($_GET[$name])) {
      $arr = array();
      foreach($_GET[$name] as $key => $value) {
        $newkey = filter_xss($key);
        $newvalue = filter_xss($value);
        $newvalue = str_replace('&#62;', '', $newvalue);
        $newvalue = str_replace('&#60;', '', $newvalue);
        $newvalue = str_replace('--', '', $newvalue);
        $arr[$newkey] = $newvalue;
      }
      return $arr;
    }
    else {
      $newvalue = filter_input(INPUT_GET, $name, FILTER_SANITIZE_SPECIAL_CHARS, FILTER_FLAG_ENCODE_HIGH);
      $newvalue = str_replace('&#62;', '', $newvalue);
      $newvalue = str_replace('&#60;', '', $newvalue);
      $newvalue = str_replace('--', '', $newvalue);
      return $newvalue;
    }
  }
}


